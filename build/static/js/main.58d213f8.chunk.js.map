{"version":3,"sources":["components/NavBar/index.js","components/Header/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","href","score","topScore","Header","Main","images","map","image","onClick","handleCardClick","key","id","src","process","alt","App","state","cardArray","shuffleCards","sort","Math","random","event","currentImage","target","indexOf","setState","clickedarray","concat","topscore","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"49BAeiBA,MAZjB,SAAgBC,GACZ,OACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,SAAQ,uBAAGC,KAAK,KAAR,gBACvB,yBAAKD,UAAU,SAAf,4BACA,yBAAKA,UAAU,SAAf,UAA+BD,EAAMG,MAArC,iBAA0DH,EAAMI,a,MCO3DC,MAbf,WACE,OACE,yBAAKJ,UAAU,mBACX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,gBACA,uBAAGA,UAAU,QAAb,gF,eCcDK,MAnBf,SAAcN,GACZ,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,eACZM,EAAOC,KAAI,SAACC,GAAD,OACV,yBACER,UAAU,mBACVS,QAASV,EAAMW,gBACfC,IAAKH,EAAMI,GACXC,IAAKC,eAAyBN,EAAMA,MACpCO,IAAI,YACJH,GAAIJ,EAAMI,WCyCPI,E,4MA/CbC,MAAQ,CACNX,SACAJ,MAAO,EACPC,SAAU,EACVe,UAAW,I,EAGbC,aAAe,WACb,OAAO,EAAKF,MAAMX,OAAOc,MAAK,kBAAMC,KAAKC,SAAW,O,EAGtDZ,gBAAkB,SAAAa,GAChB,IAAMC,EAAeD,EAAME,OAAOb,GAEb,EAAKK,MAAMC,UAAUQ,QAAQF,IAAiB,EAGjE,EAAKG,SAAS,CACZrB,OAAQ,EAAKa,eACbS,aAAc,GACd1B,MAAO,KAGT,EAAKyB,SAAS,CACZrB,OAAQ,EAAKa,eACbD,UAAW,EAAKD,MAAMC,UAAUW,OAAOL,GACvCtB,MAAO,EAAKe,MAAMf,MAAQ,IAIxB,EAAKe,MAAMf,OAAS,EAAKe,MAAMa,UACjC,EAAKH,SAAS,CAAEG,SAAU,EAAKb,MAAMf,MAAQ,M,uDAMjD,OACE,6BACE,kBAAC,EAAD,CAAQA,MAAO6B,KAAKd,MAAMf,MAAO4B,SAAUC,KAAKd,MAAMa,WACtD,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMpB,gBAAiBqB,KAAKrB,kBAH9B,S,GAvCYsB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58d213f8.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./navbar.css\"\n\nfunction NavBar(props) {\n    return (\n      <div className=\"my-nav container-fluid\">\n        <div className=\"container my-navbar\">\n          <div className=\"brand\"><a href=\"/\">Clicky Game</a></div>\n          <div className=\"title\">Click an image to begin!</div>\n          <div className=\"score\">Score: {props.score} | Top Score: {props.topScore}</div>\n        </div>\n      </div>\n    );\n  }\n  \n  export default NavBar;","import React from \"react\";\nimport \"./header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"container-fluid\">\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Clicky Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./main.css\";\nimport images from \"../../images.json\";\n\nfunction Main(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row mx-auto\">\n        {images.map((image) => (\n          <img\n            className=\"click-item shake\"\n            onClick={props.handleCardClick}\n            key={image.id}\n            src={process.env.PUBLIC_URL + image.image}\n            alt=\"Guitarist\"\n            id={image.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\n// import Card from \"./components/Card\";\nimport Main from \"./components/Main\";\nimport images from \"./images.json\";\n\nclass App extends React.Component {\n  state = {\n    images,\n    score: 0,\n    topScore: 0,\n    cardArray: [],\n  };\n\n  shuffleCards = () => {\n    return this.state.images.sort(() => Math.random() - 0.5);\n  };\n\n  handleCardClick = event => {\n    const currentImage = event.target.id;\n\n    const imageClicked = this.state.cardArray.indexOf(currentImage) > -1;\n\n    if (imageClicked) {\n      this.setState({\n        images: this.shuffleCards(),\n        clickedarray: [],\n        score: 0\n      });\n    } else {\n      this.setState({\n        images: this.shuffleCards(),\n        cardArray: this.state.cardArray.concat(currentImage),\n        score: this.state.score + 1\n      });\n\n      //update topscore\n      if (this.state.score >= this.state.topscore) {\n        this.setState({ topscore: this.state.score + 1 });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topscore={this.state.topscore} />\n        <Header />\n        <Main handleCardClick={this.handleCardClick} />>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}